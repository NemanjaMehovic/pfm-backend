// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pfm.Database;

#nullable disable

namespace pfm.Migrations
{
    [DbContext(typeof(PFMDbContext))]
    partial class PFMDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("pfm.Database.Entities.CategoryEntity", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("parent_code")
                        .HasColumnType("text");

                    b.HasKey("code");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("pfm.Database.Entities.TransactionEntity", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<double>("amount")
                        .HasColumnType("double precision");

                    b.Property<string>("beneficiary_name")
                        .HasColumnType("text");

                    b.Property<string>("categoryId")
                        .HasColumnType("text");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("mcc")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("pfm.Database.Entities.TransactionSplitsEntity", b =>
                {
                    b.Property<string>("transactionId")
                        .HasColumnType("text");

                    b.Property<string>("categoryId")
                        .HasColumnType("text");

                    b.Property<double>("amount")
                        .HasColumnType("double precision");

                    b.HasKey("transactionId", "categoryId");

                    b.HasIndex("categoryId");

                    b.ToTable("transaction_splits", (string)null);
                });

            modelBuilder.Entity("pfm.Database.Entities.TransactionEntity", b =>
                {
                    b.HasOne("pfm.Database.Entities.CategoryEntity", "category")
                        .WithMany("transactions")
                        .HasForeignKey("categoryId");

                    b.Navigation("category");
                });

            modelBuilder.Entity("pfm.Database.Entities.TransactionSplitsEntity", b =>
                {
                    b.HasOne("pfm.Database.Entities.CategoryEntity", "category")
                        .WithMany("splits")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pfm.Database.Entities.TransactionEntity", "transaction")
                        .WithMany("splits")
                        .HasForeignKey("transactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("transaction");
                });

            modelBuilder.Entity("pfm.Database.Entities.CategoryEntity", b =>
                {
                    b.Navigation("splits");

                    b.Navigation("transactions");
                });

            modelBuilder.Entity("pfm.Database.Entities.TransactionEntity", b =>
                {
                    b.Navigation("splits");
                });
#pragma warning restore 612, 618
        }
    }
}
